# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Build and Push Docker image to ECR

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: lguplus-aws
  
  ECS_CLUSTER_NAME: test-cluster
  ECS_CONTAINER_NAME: test-container
  ECS_SERVICE_NAME: test-service
  ECS_TASK_DEFINITION: task-test
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # JDK setting
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: make application yml file
      run: |
        mkdir -p ./github-actions/src/main/resources
        touch ./github-actions/src/main/resources/application.yml
        echo "${{ secrets.SPRING_APPLICATION_YML }}" > ./github-actions/src/main/resources/application.yml
      
    - uses: actions/upload-artifact@v2
      with: 
        name: application.yml
        path: ./github-actions/src/main/resources/application.yml
    
    - name: Grant execute permission for gradlew
      run : chmod +x gradlew
      working-directory: "./github-actions"
    
    - name : Build test with Gradle
      run : ./gradlew clean test
      working-directory: "./github-actions"
      
    - name : Build with Gradle
      run : ./gradlew build
      working-directory: "./github-actions"
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Check current directory
      run: ls -al

    - name: Build, tag, and push docker image to Amazon ECR
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --platform amd64 -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
        echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"
      working-directory: "."
    
    - name: Download task definition
      id: task-file-json
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
        ls -al
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ECS_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
